/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package GPULootSeedFinder.util;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import kaptainwutax.mcutils.util.math.NextLongReverser;
import kaptainwutax.mcutils.util.pos.CPos;
import kaptainwutax.mcutils.version.MCVersion;
import mjtb49.hashreversals.ChunkRandomReverser;

public class Reverser {

    public static HashMap<Long, CPos> getStructureSeedsFromLootSeeds(List<Long> seeds, int chunkRadius, MCVersion version, int salt) {
        HashMap<Long, CPos> structureSeeds = new HashMap<>();
        int index = Integer.parseInt(Integer.toString(salt).substring(0, 1));
        int step = salt % 10;

        for (long lootSeed : seeds) {
            ArrayList<Long> decoratorSeeds = new ArrayList<>();
            NextLongReverser.addSeedsToList(lootSeed, decoratorSeeds);
            for (long internalDecoratorSeed : decoratorSeeds) {
                long decoratorSeed = internalDecoratorSeed ^ 25214903917L;
                long populationSeed = ChunkRandomReverser.reverseDecoratorSeed(decoratorSeed, step, index, version);
                for (int chunkX = -chunkRadius; chunkX < chunkRadius; chunkX++) {
                    for (int chunkZ = -chunkRadius; chunkZ < chunkRadius; chunkZ++) {
                        for (long structureSeed : ChunkRandomReverser.reversePopulationSeed(populationSeed, chunkX << 4, chunkZ << 4, version)) {
                            if ((structureSeed & (1L << 48 - 1)) == 0) continue;
                            structureSeeds.put(structureSeed, new CPos(chunkX, chunkZ));
                        }
                    }
                }
            }
        }
        return structureSeeds;
    }

    public static List<Long> getSeedsFromBinaryFile(String filename) {
        List<Long> lootSeeds = new ArrayList<>();
        try {
            FileInputStream reader = new FileInputStream(filename);
            byte[] bytes = reader.readNBytes(8);
            while (bytes.length!=0&&bytes[0]!=-1) {
                long lootSeed = Util.bytesToLong(bytes);
                lootSeeds.add(lootSeed);
                bytes = reader.readNBytes(8);
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return lootSeeds;
    }

    public static List<Long> getSeedsFromTextFile(String s) {
        List<Long> lootSeeds = new ArrayList<>();
        try {
            File f = new File(s);
            Scanner sc = new Scanner(f);
            while (sc.hasNextLine()) {
                long lootSeed = Long.parseLong(sc.nextLine().split(" ")[0]);
                lootSeeds.add(lootSeed);
            }
            sc.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return lootSeeds;
    }
}
